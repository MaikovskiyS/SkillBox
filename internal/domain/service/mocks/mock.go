// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	model "skillbox/internal/domain/model"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, data model.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, data)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, id)
}

// DeleteUserFromFriends mocks base method.
func (m *MockUserRepository) DeleteUserFromFriends(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromFriends", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromFriends indicates an expected call of DeleteUserFromFriends.
func (mr *MockUserRepositoryMockRecorder) DeleteUserFromFriends(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromFriends", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserFromFriends), ctx, id)
}

// GetFriends mocks base method.
func (m *MockUserRepository) GetFriends(ctx context.Context, id uint64) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", ctx, id)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockUserRepositoryMockRecorder) GetFriends(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockUserRepository)(nil).GetFriends), ctx, id)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context, id uint64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx, id)
}

// MakeFriend mocks base method.
func (m *MockUserRepository) MakeFriend(ctx context.Context, source, target uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeFriend", ctx, source, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeFriend indicates an expected call of MakeFriend.
func (mr *MockUserRepositoryMockRecorder) MakeFriend(ctx, source, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFriend", reflect.TypeOf((*MockUserRepository)(nil).MakeFriend), ctx, source, target)
}

// UpdateUserAge mocks base method.
func (m *MockUserRepository) UpdateUserAge(ctx context.Context, id, age uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAge", ctx, id, age)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAge indicates an expected call of UpdateUserAge.
func (mr *MockUserRepositoryMockRecorder) UpdateUserAge(ctx, id, age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAge", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserAge), ctx, id, age)
}
